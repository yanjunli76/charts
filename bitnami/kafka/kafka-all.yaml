---
# Source: kafka/templates/poddisruptionbudget.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-7.2.9
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: new
      app.kubernetes.io/component: kafka
  maxUnavailable: 1
  

---
# Source: kafka/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: new-kafka-headless
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-7.2.9
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: kafka
      port: 9092
      targetPort: kafka
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: new
    app.kubernetes.io/component: kafka

---
# Source: kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-7.2.9
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
  annotations: 
    {}
    
spec:
  type: ClusterIP
  ports:
    - name: kafka
      port: 9092
      targetPort: kafka
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: new
    app.kubernetes.io/component: kafka

---
# Source: kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-7.2.9
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
    role: kafka
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: new
      app.kubernetes.io/component: kafka
  serviceName: new-kafka-headless
  podManagementPolicy: "Parallel"
  replicas: 3
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-7.2.9
        app.kubernetes.io/instance: new
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/component: kafka
    spec:      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      nodeSelector:
        {}
        
      tolerations:
        []
        
      affinity:
        {}
        
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:2.4.0-debian-10-r31
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "true"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "new-zookeeper"
            - name: KAFKA_PORT_NUMBER
              value: "9092"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:$(KAFKA_PORT_NUMBER)"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: 'PLAINTEXT://$(MY_POD_NAME).new-kafka-headless.default.svc.cluster.local:$(KAFKA_PORT_NUMBER)'
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_BROKER_ID
              value: "-1"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: /bitnami/kafka/data
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              value: "https"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "3"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
          ports:
            - name: kafka
              containerPort: 9092
          livenessProbe:
            tcpSocket:
              port: kafka
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            tcpSocket:
              port: kafka
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
        
      volumes:
        
        
        
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100Gi"
        
        storageClassName: kafka-local-storage

---
# Source: kafka/templates/configmap.yaml

---
# Source: kafka/templates/jmx-configmap.yaml

---
# Source: kafka/templates/kafka-exporter.yaml


---
# Source: kafka/templates/kafka-jmx-metrics-svc.yaml


---
# Source: kafka/templates/kafka-metrics-svc.yaml


---
# Source: kafka/templates/scripts-configmap.yaml

---
# Source: kafka/templates/secrets.yaml


---
# Source: kafka/templates/serviceaccount.yaml


---
# Source: kafka/templates/servicemonitor-jmx-metrics.yaml


---
# Source: kafka/templates/servicemonitor-metrics.yaml


---
# Source: kafka/templates/svc-external-access.yaml


