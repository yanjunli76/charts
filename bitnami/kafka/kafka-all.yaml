---
# Source: kafka/templates/poddisruptionbudget.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: new
      app.kubernetes.io/component: kafka

---
# Source: kafka/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: new-kafka-scripts
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
data:
  setup.sh: |-
    #!/bin/bash

    ID="${MY_POD_NAME#"new-kafka-"}"
    export KAFKA_CFG_BROKER_ID="$ID"
    # Configure external ip and port
    # export EXTERNAL_ACCESS_IP=$(curl -s https://ipinfo.io/ip)
    LAN_IP=${NODE_IP:?node ip is missing}
    export EXTERNAL_ACCESS_IP=${LAN_IP}
    export EXTERNAL_ACCESS_PORT=$(echo '[30000 30001 30002]' | tr -d '[]' | cut -d ' ' -f "$(($ID + 1))")

    # Configure Kafka internal and external listeners
    export KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:${EXTERNAL_ACCESS_PORT}
    export KAFKA_CFG_ADVERTISED_LISTENERS="INTERNAL://${MY_POD_NAME}.new-kafka-headless.default.svc.cluster.local:9092,EXTERNAL://${EXTERNAL_ACCESS_IP}:${EXTERNAL_ACCESS_PORT}"

    exec /entrypoint.sh /run.sh

---
# Source: kafka/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-sa
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka

---
# Source: kafka/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
      - patch
---
# Source: kafka/templates/rolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
roleRef:
  kind: Role
  name: new-kafka
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: kafka-sa
    namespace: default

---
# Source: kafka/templates/svc-external-access.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: new-kafka-0-external
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
    pod: new-kafka-0
spec:
  type: NodePort
  ports:
    - name: tcp-kafka
      port: 19092
      nodePort: 30000
      targetPort: 30000
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: new
    app.kubernetes.io/component: kafka
    statefulset.kubernetes.io/pod-name: new-kafka-0
---
---
apiVersion: v1
kind: Service
metadata:
  name: new-kafka-1-external
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
    pod: new-kafka-1
spec:
  type: NodePort
  ports:
    - name: tcp-kafka
      port: 19092
      nodePort: 30001
      targetPort: 30001
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: new
    app.kubernetes.io/component: kafka
    statefulset.kubernetes.io/pod-name: new-kafka-1
---
---
apiVersion: v1
kind: Service
metadata:
  name: new-kafka-2-external
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
    pod: new-kafka-2
spec:
  type: NodePort
  ports:
    - name: tcp-kafka
      port: 19092
      nodePort: 30002
      targetPort: 30002
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: new
    app.kubernetes.io/component: kafka
    statefulset.kubernetes.io/pod-name: new-kafka-2
---

---
# Source: kafka/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: new-kafka-headless
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-kafka
      port: 9092
      protocol: TCP
      targetPort: kafka
    - name: tls-kafka
      port: 9093
      protocol: TCP
      targetPort: kafka-ssl
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: new
    app.kubernetes.io/component: kafka

---
# Source: kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  ports:
    - name: tcp-kafka
      port: 9092
      protocol: TCP
      targetPort: kafka
      nodePort: null
    - name: tls-kafka
      port: 9093
      protocol: TCP
      targetPort: kafka-ssl
      nodePort: null
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: new
    app.kubernetes.io/component: kafka

---
# Source: kafka/templates/statefulset.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: new-kafka
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-9.0.0
    app.kubernetes.io/instance: new
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: new
      app.kubernetes.io/component: kafka
  serviceName: new-kafka-headless
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-9.0.0
        app.kubernetes.io/instance: new
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/component: kafka
      annotations:
        checksum/scripts: 42841942731d604b8b95f20a736744d35589b57ccb35d3ed520e716cf4d1da31
    spec:      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        
      serviceAccountName: kafka-sa
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:2.4.1-debian-10-r12
          imagePullPolicy: "IfNotPresent"
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "true"
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "nsxi-zookeeper"
            - name: KAFKA_PORT_NUMBER
              value: "9092"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:SASL_SSL,EXTERNAL:SASL_SSL"
            - name: KAFKA_OPTS
              value: "-Djava.security.auth.login.config=/opt/bitnami/kafka/conf/kafka_jaas.conf"
            - name: KAFKA_BROKER_USER
              value: "user"
            - name: KAFKA_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: kafka-broker-password
            - name: KAFKA_INTER_BROKER_USER
              value: "admin"
            - name: KAFKA_INTER_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: kafka-inter-broker-password
            - name: KAFKA_ZOOKEEPER_USER
              value: "kafka"
            - name: KAFKA_ZOOKEEPER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: kafka-zookeeper-password
            - name: KAFKA_CERTIFICATE_PASSWORD
              value: "Admin!23Admin"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_BROKER_ID
              value: "-1"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              value: 
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "3"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
            
            - name: KAFKA_CFG_ZOOKEEPER_SET_ACL
              value: "true"
            
          ports:
            - name: kafka
              containerPort: 9092
            - name: kafka-ssl
              containerPort: 9093
          livenessProbe:
            initialDelaySeconds: 10
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
            
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            tcpSocket:
              port: kafka
            timeoutSeconds: 5
            
          resources:
            limits: {}
            requests: {}
            
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/kafka
            - name: kafka-certificates
              mountPath: /opt/bitnami/kafka/conf/certs/
              readOnly: true
      volumes:
        - name: scripts
          configMap:
            name: new-kafka-scripts
            defaultMode: 0755
        - name: kafka-certificates
          secret:
            secretName: kafka-cert-secret
            defaultMode: 256
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100Gi"
        
        storageClassName: kafka-local-storage

---
# Source: kafka/templates/configmap.yaml

---
# Source: kafka/templates/jmx-configmap.yaml

---
# Source: kafka/templates/jmx-metrics-svc.yaml


---
# Source: kafka/templates/kafka-metrics-deployment.yaml


---
# Source: kafka/templates/kafka-metrics-svc.yaml


---
# Source: kafka/templates/secrets.yaml


---
# Source: kafka/templates/servicemonitor-jmx-metrics.yaml


---
# Source: kafka/templates/servicemonitor-metrics.yaml


